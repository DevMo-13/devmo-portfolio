{
	"projects": [
		{
			"id": "1",
			"name": "RANDOM QUOTE GENERATOR",
			"description": "App that displays random quotes.",
			"technologies": [
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Built the array of quote objects to store the quotes",
				"Wrote my own functions for selecting random quotes from the array and printing them to the screen",
				"Programmed a timing function to automatically update the quote on the page at regular intervals",
				"Created a function that updates the background color to a random color"
			],
			"githubLink": "https://github.com/DevMo-13/random-quote-generator",
			"mainImage": {
				"path": "/proj1-main.png",
				"alt": "project example - random qoute"
			},
			"otherImage1": {
				"path": "/proj1-1.png",
				"alt": "project example - random qoute"
			},
			"otherImage2": {
				"path": "/proj1-2.png",
				"alt": "project example - random qoute"
			},
			"otherImage3": {
				"path": "/proj1-3.png",
				"alt": "project example - random qoute"
			}
		},
		{
			"id": "2",
			"name": "STUDENT LIST PAGINATOR",
			"description": "Website of student entries with pagination.",
			"technologies": [
				"Progressive Enhancement",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Utilized the principle of progressive enhancement to enhance usability of a web page displaying student entries",
				"Used JavaScript to take a list of student info and only displays 10 students on the page at a time",
				"Added a navigation system -- using a series of links at the bottom of the page -- to let users click through the other student entries, 10 at a time",
				"Programmed the pagination to work with a list of any number of students, so it is flexible and able to respond to lists of different lengths"
			],
			"githubLink": "https://github.com/DevMo-13/list-pagination-and-filtering",
			"mainImage": {
				"path": "/proj2-main.png",
				"alt": "project example - pagination"
			},
			"otherImage1": {
				"path": "/proj2-1.png",
				"alt": "project example - pagination"
			},
			"otherImage2": {
				"path": "/proj2-2.png",
				"alt": "project example - pagination"
			},
			"otherImage3": {
				"path": "/proj2-3.png",
				"alt": "project example - pagination"
			}
		},
		{
			"id": "3",
			"name": "CONFERENCE REGISTRATION FORM",
			"description": "Interactive online registration form for a fictional conference called FullStack Conf.",
			"technologies": [
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Programmed customized and conditional behavior / interactivity",
				"Added validation so that the form validates user input and provides helpful error messages when the user enters invalid information into the form fields"
			],
			"githubLink": "https://github.com/DevMo-13/interactive-form",
			"mainImage": {
				"path": "/proj3-main.png",
				"alt": "project example - form"
			},
			"otherImage1": {
				"path": "/proj3-1.png",
				"alt": "project example - form"
			},
			"otherImage2": {
				"path": "/proj3-2.png",
				"alt": "project example - form"
			},
			"otherImage3": {
				"path": "/proj3-3.png",
				"alt": "project example - form"
			}
		},
		{
			"id": "4",
			"name": "PHRASE HUNTER GAME APP",
			"description": "Browser-based word guessing game: Phrase Hunter.",
			"technologies": [
				"Object-Oriented Programming",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Used JavaScript and OOP (Object-Oriented Programming) to select a random, hidden phrase, which a player then tries to guess",
				"Created 2 JavaScript classes with specific properties and methods - I created a Game class for managing the game, and a Phrase class to help with creating an array of Phrase objects",
				"Programmed the app to choose a random phrase, split the phrase into letters, and put those letters onto the gameboard",
				"Each time the player guesses a letter, the program compares the letter the player has chosen with the random phrase (if the letter is in the phrase, the gameboard displays the chosen letters on the screen)",
				"A player continues to select letters until they guess the phrase (and win), or make five incorrect guesses (and lose)",
				"If the player completes the phrase before they run out of guesses, I programmed a winning screen to appear",
				"If the player guesses incorrectly five times, I programmed a losing screen to appear",
				"A player can guess a letter only once - after they’ve guessed a letter, the programming disables that letter on the onscreen keyboard",
				"Added functionality in which a player can use their physical computer keyboard to enter guesses"
			],
			"githubLink": "https://github.com/DevMo-13/oop-game-show-app",
			"mainImage": {
				"path": "/proj4-main.png",
				"alt": "project example - phrase game"
			},
			"otherImage1": {
				"path": "/proj4-1.png",
				"alt": "project example - phrase game"
			},
			"otherImage2": {
				"path": "/proj4-2.png",
				"alt": "project example - phrase game"
			},
			"otherImage3": {
				"path": "/proj4-3.png",
				"alt": "project example - phrase game"
			}
		},
		{
			"id": "5",
			"name": "EMPLOYEE DIRECTORY",
			"description": "Employee directory for a fictional company called Awesome Startup. ",
			"technologies": [
				"Public API",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Requested a JSON object from the public API (Random User Generator API) to grab information for 12 random “employees,” and used that data to build a prototype for an Awesome Startup employee directory",
				"Parsed the data so that 12 employees are listed in a grid with their thumbnail image, full name, email, and location",
				"Clicking the employee’s image or name will open a modal window with more detailed information, such as the employee’s birthday and address",
				"Added a way to toggle back and forth between employees when the modal window is open",
				"Enabled search functionality that filters the directory by name"
			],
			"githubLink": "https://github.com/DevMo-13/public-api-requests",
			"mainImage": {
				"path": "/proj5-main.png",
				"alt": "project example - directory"
			},
			"otherImage1": {
				"path": "/proj5-1.png",
				"alt": "project example - directory"
			},
			"otherImage2": {
				"path": "/proj5-2.png",
				"alt": "project example - directory"
			},
			"otherImage3": {
				"path": "/proj5-3.png",
				"alt": "project example - directory"
			}
		},
		{
			"id": "6",
			"name": "TREEHOUSE PORTFOLIO SITE",
			"description": "Portfolio site to showcase projects in the Treehouse techdegree.",
			"technologies": [
				"Node.js",
				"Express.js",
				"Pug",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Utilized Node.js, Express, and Pug to create a portfolio site to showcase the first 5 projects in the techdegree",
				"Created a JSON file to store all the data about the projects created",
				"Site contains a modern landing page, an about page with my contact info, and a series of project pages",
				"Used Pug to complete provided templates that utilize the JSON to generate the markup that is ultimately displayed in the browser",
				"Linked the JSON with the Pug templates",
				"Programmed routes to handle requests",
				"Programmed the middleware to utilize static files like CSS",
				"Set up error handling",
				"Set up a server to serve the project"
			],
			"githubLink": "https://github.com/DevMo-13/static-node.js-and-express-site",
			"mainImage": {
				"path": "/proj6-main.png",
				"alt": "project example - portfolio"
			},
			"otherImage1": {
				"path": "/proj6-1.png",
				"alt": "project example - portfolio"
			},
			"otherImage2": {
				"path": "/proj6-2.png",
				"alt": "project example - portfolio"
			},
			"otherImage3": {
				"path": "/proj6-3.png",
				"alt": "project example - portfolio"
			}
		},
		{
			"id": "7",
			"name": "REACT GALLERY APP",
			"description": "Image gallery search app.",
			"technologies": [
				"React",
				"Fetch API",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Used the Create React App tool to set up the initial project",
				"Used JavaScript and JSX to build out the gallery components in a modular fashion",
				"Utilized React Router to set up routes for three default topic pages and a search page",
				"Managed state in a container component that passes data down to reusable stateless components",
				"Programmed Axios to fetch data from the Flickr API, and the data was used to display images",
				"Added logic to handle search and various requirements of the project",
				"Added a loading indicator that displays each time the app fetches new data",
				"Programmed a friendly user message to tell the user there are no matches if no matches are found by the search",
				"Included a 404-like error route that displays a friendly 404 error page when a URL does not match an existing route"
			],
			"githubLink": "https://github.com/DevMo-13/react-gallery-app",
			"mainImage": {
				"path": "/proj7-main.png",
				"alt": "project example - gallery"
			},
			"otherImage1": {
				"path": "/proj7-1.png",
				"alt": "project example - gallery"
			},
			"otherImage2": {
				"path": "/proj7-2.png",
				"alt": "project example - gallery"
			},
			"otherImage3": {
				"path": "/proj7-3.png",
				"alt": "project example - gallery"
			}
		},
		{
			"id": "8",
			"name": "LIBRARY DATABASE MANAGER",
			"description": "Dynamic web application that manages a library's collection of books.",
			"technologies": [
				"Node.js",
				"Express.js",
				"Sequelize",
				"Pug",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Used Node.js and Express to set up routes and middleware",
				"Configured the Sequelize ORM for data modeling, validation, and persistence",
				"Utilized Pug to build out the views",
				"Enabled functionality for user to list, add, update, and delete books from the library's database"
			],
			"githubLink": "https://github.com/DevMo-13/sql-library-manager",
			"mainImage": {
				"path": "/proj8-main.png",
				"alt": "project example - library database"
			},
			"otherImage1": {
				"path": "/proj8-1.png",
				"alt": "project example - library database"
			},
			"otherImage2": {
				"path": "/proj8-2.png",
				"alt": "project example - library database"
			},
			"otherImage3": {
				"path": "/proj8-3.png",
				"alt": "project example - library database"
			}
		},
		{
			"id": "9",
			"name": "SCHOOL DATABASE - REST API",
			"description": "School database that holds information about courses.",
			"technologies": [
				"Node.js",
				"Express.js",
				"Sequelize",
				"REST API",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Programmed an API that provides a way for users to administer a school database containing information about courses",
				"Enabled users to interact with the database by retrieving a list of courses, as well as adding, updating, and deleting courses in the database",
				"Used REST API design, Node.js, and Express to create API routes",
				"Configured the Sequelize ORM for data modeling, validation, and persistence",
				"Utilized bcryptjs to hash user passwords",
				"Set up permissions that require users to create an account and be signed in to make changes to database"
			],
			"githubLink": "https://github.com/DevMo-13/rest-api",
			"mainImage": {
				"path": "/proj9-main.png",
				"alt": "project example - school database rest api"
			},
			"otherImage1": {
				"path": "/proj9-1.png",
				"alt": "project example - school database rest api"
			},
			"otherImage2": {
				"path": "/proj9-2.png",
				"alt": "project example - school database rest api"
			},
			"otherImage3": {
				"path": "/proj9-3.png",
				"alt": "project example - school database rest api"
			}
		},
		{
			"id": "10",
			"name": "SCHOOL DB -  REACT AND REST API",
			"description": "Full stack client app for the school database.",
			"technologies": [
				"React",
				"Node.js",
				"Express.js",
				"Sequelize",
				"REST API",
				"JavaScript",
				"HTML/CSS"
			],
			"achievements": [
				"Programmed the full stack application to provide a way for users to administer the school database containing information about courses",
				"Enabled users to interact with the database by retrieving a list of courses, viewing details for a specific course, as well as creating, updating and deleting courses in the database",
				"Used JavaScript and JSX to build out the components for the application in a modular fashion",
				"Used React Router to set up routes",
				"Configured protected routes that only allow authenticated users to access those pages",
				"Managed global state by using the React Context API",
				"Used the Fetch API to fetch data from my REST API",
				"Utilized CORS to support cross-origin resource sharing between the REST API and the React app",
				"Allowed users to sign up and used basic authentication to support users signing in",
				"Programmed user-friendly messages to display when things go wrong",
				"Set user credentials to persist using an HTTP cookie so that the user's authenticated state is maintained even if the application is reloaded or loaded into a new browser tab",
				"Added functionality that redirects a user back to their previous screen after they successfully sign in"
			],
			"githubLink": "https://github.com/DevMo-13/full-stack-app-with-react-and-rest-api",
			"mainImage": {
				"path": "/proj10-main.png",
				"alt": "project example - school database"
			},
			"otherImage1": {
				"path": "/proj10-1.png",
				"alt": "project example - school database"
			},
			"otherImage2": {
				"path": "/proj10-2.png",
				"alt": "project example - school database"
			},
			"otherImage3": {
				"path": "/proj10-3.png",
				"alt": "project example - school database"
			}
		}
	]
}
